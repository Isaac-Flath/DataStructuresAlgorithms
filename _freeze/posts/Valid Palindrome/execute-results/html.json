{
  "hash": "dbc0bd75708519c6125e77280a7ce025",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Valid Palindrome\"\nauthor: \"Isaac Flath\"\ndate: \"2024-02-14\"\ncategories: [two pointers, string]\ndescription: \"Check if cleaned phrase is a palindrome\"\n---\n\n>Problem Source:  Leetcode\n\n## Problem Description\n\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` if it is a palindrome, or `false` otherwise.\n\n\n### tests\n\n::: {#2a5c5c60 .cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    s = \"A man, a plan, a canal: Panama\"\n    assert fn(s)\n    s = \"race a car\"\n    assert not fn(s)\n    s = \" \"\n    assert fn(s)\n```\n:::\n\n\n## Solution\n\n+ Time Complexity: `O(n)`\n+ Space Complexity: `O(1)`\n\n::: {#8d947b54 .cell execution_count=2}\n``` {.python .cell-code}\ndef isPalindrome(s: str) -> bool:\n    lp, rp = 0, len(s)-1\n\n    while lp < rp:        \n        # Ignore non-alphanumeric characters by moving pointer\n        # Alternative to if statements is filter(lambda x: x.isalnum(), s) prior to loop\n        if not s[lp].isalnum():\n            lp += 1\n            continue\n        if not s[rp].isalnum():\n            rp -= 1\n            continue        \n\n        # Return and exit at first failure\n        if s[lp].lower() != s[rp].lower():\n            return False\n\n        # Move to next characters\n        lp += 1\n        rp -= 1\n\n    # If no failures, then it's a palindrome\n    return True\n```\n:::\n\n\n",
    "supporting": [
      "Valid Palindrome_files"
    ],
    "filters": [],
    "includes": {}
  }
}