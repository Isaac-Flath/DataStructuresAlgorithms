{
  "hash": "9034adc717ebe2e82e11f6bf20f2f624",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Valid Sudoku\"\nauthor: \"Isaac Flath\"\ndate: \"2024-02-06\"\ncategories: [array, hash table, matrix]\ndescription: \"Determine if a 9 x 9 sudoku board is valid \"\n---\n\n> Problem Source: Leetcode\n\n## Problem Description\n\nDetermine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n1. Each row must contain the digits `1-9` without repetition. \n1. Each column must contain the digits `1-9` without repetition. \n1. Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition. \n\n**Note:**\n\n+ A Sudoku board (partially filled) could be valid but is not necessarily solvable. \n+ Only the filled cells need to be validated according to the mentioned rules.\n\n![](sodoku.png)\n\n```\nboard = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n```\n\n### tests\n\n::: {#7a694184 .cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n            ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n            ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n            ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n            ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n            ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n            ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n            ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n            ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n    expected = True\n    actual = fn(board)\n    assert actual == expected \n\n    board = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n            ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n            ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n            ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n            ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n            ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n            ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n            ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n            ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n    expected = False\n    actual = fn(board)\n    assert actual == expected \n```\n:::\n\n\n## Solution\n\n-   Time Complexity: `O(n)`\n-   Space Complexity: `O(n)`\n\nWhere `n` in the number of cells on the sudoku board.\n\n::: {#ef0b0009 .cell execution_count=2}\n``` {.python .cell-code}\nfrom typing import List\ndef isValidSudoku(board: List[List[str]]) -> bool:\n    # Initialize sets to track if there's duplicate values\n    rowSet = [set() for _ in range(9)]\n    colSet = [set() for _ in range(9)]\n    gridSet = [set() for _ in range(9)]\n\n    # for each cell in matrix\n    for rowIndex in range(0,9):\n        for colIndex in range(0,9):\n            cellValue = board[rowIndex][colIndex]\n            if cellValue == \".\": continue\n\n            # Calculate the grid index number\n            gridIndex = rowIndex//3*3 + colIndex //3\n\n            # if cell value is already in set for row/col/grid\n            if (cellValue in rowSet[rowIndex] or\n                cellValue in colSet[colIndex] or \n                cellValue in gridSet[gridIndex]): \n                # Then there's a duplicate and it's not valid\n                return False\n\n            # Otherwise add to the set and go to the next cell\n            rowSet[rowIndex].add(cellValue)\n            colSet[colIndex].add(cellValue)\n            gridSet[gridIndex].add(cellValue)\n    # If you make it through all cells with no dupes, then it's valid\n    return True\n\ntest(isValidSudoku)\n```\n:::\n\n\n",
    "supporting": [
      "Valid Sudoku_files"
    ],
    "filters": [],
    "includes": {}
  }
}