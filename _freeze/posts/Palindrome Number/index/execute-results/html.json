{
  "hash": "63f155379235881154d612f4de1b0f39",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Palindrome Number\"\nauthor: \"Isaac Flath\"\ndate: \"2024-01-29\"\ncategories: [math]\ndescription: \"Find indices of two numbers that add up to a target number\"\n---\n\n>Problem Source:  Leetcode\n\n## Problem Description\n\nGiven an integer `x`, return `true` if `x` is a palindrome, and `false` otherwise.  You cannot convert to string.\n\n### tests\n\n::: {#1389e17d .cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    value = 121\n    expected = True\n    actual = fn(value)\n    assert actual == expected \n\n    value = -121\n    expected = False\n    actual = fn(value)\n    assert actual == expected \n\n    value = 10\n    expected = False\n    actual = fn(value)\n    assert actual == expected \n\n    value = 12321\n    expected = True\n    actual = fn(value)\n    assert actual == expected \n\n    value = 123214231\n    expected = False\n    actual = fn(value)\n    assert actual == expected \n```\n:::\n\n\n## Solutions\n\n### String Index\n\nThe first thought is that we could cast to a string then loop halfway through the string to verify the first and laft halves are the same.\n\n::: {#2bb892e0 .cell execution_count=2}\n``` {.python .cell-code}\ndef isPalindrome(x: int) -> bool:\n    x = str(x)\n    for i in range(len(x)//2):\n        first, last = x[i], x[-(i+1)]\n        if first != last: return False\n    return True\n\ntest(isPalindrome)\n```\n:::\n\n\n### Math `O(log10(n))`\n\nCould you solve it without converting the integer to a string?\n\n::: {#c9d0eb41 .cell execution_count=3}\n``` {.python .cell-code}\ndef isPalindrome(x: int) -> bool:\n    if x < 0: # A negative sign means not a palindrome\n        return False \n    if (x != 0) and (x % 10 == 0): # Int has no leading zeros, so if it ends with 0 it's not a palindrome\n        return False  \n\n    numberHalf = 0\n    while x > numberHalf: # Stop once halfway\n        # Add the rightmost number from x to number half\n        numberHalf = int(numberHalf * 10 + x % 10)\n        # Drop the rightmost number on X\n        x//= 10\n\n    # If odd length drop the right most as that is the center number\n    return x == numberHalf or x == numberHalf//10 \n\ntest(isPalindrome)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}