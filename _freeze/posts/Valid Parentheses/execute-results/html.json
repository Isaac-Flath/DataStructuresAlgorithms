{
  "hash": "0ebb64910a992daca8cc8e3689f970e0",
  "result": {
    "markdown": "---\ntitle: \"Valid Parentheses\"\nauthor: \"Isaac Flath\"\ndate: \"2023-02-23\"\ncategories: [string, stack]\ndescription: \"Determine a string of enclusures are all open & closed properly and in correct order\"\n---\n\n>Problem Source:  Leetcode\n\n## Problem Description\n\nGiven a string s containing just the characters `(`, `)`, `{`, `}`, `[` and `]`, determine if the input string is valid.\n\nAn input string is valid if:\n\n+ Open brackets must be closed by the same type of brackets.\n+ Open brackets must be closed in the correct order.\n+ Every close bracket has a corresponding open bracket of the same type.\n\n\nConstraints:\n\n+ `1 <= s.length <= 104`\n+ `s` consists of parentheses only `()[]{}`.\n\n\n### tests\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    s = \"()\"\n    expected = True\n    assert fn(s) == expected \n\n    s = \"()[]{}\"\n    expected = True\n    assert fn(s) == expected \n\n    s= \"(]\"\n    expected = False\n    assert fn(s) == expected \n```\n:::\n\n\n## Solution\n\n+ Time Complexity: ``\n+ Space Complexity: ``\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef isValid(s: str) -> bool:\n    enclosures = {')':'(','}':'{',']':'['}\n    stack = []\n\n    for c in s:\n\n        # If it's an closing bracket\n        if c in enclosures:\n\n            # Validate stack exists and bracket order is correct\n            if stack and stack[-1] == enclosures[c]:\n                stack.pop()\n            else:\n                return False\n        else:\n            # If it's an opening bracket\n            stack.append(c)\n\n    # If stack isn't empty then an enclosure isn't closed\n    return not stack \n\ntest(isValid)    \n\n```\n:::\n\n\n",
    "supporting": [
      "Valid Parentheses_files"
    ],
    "filters": [],
    "includes": {}
  }
}