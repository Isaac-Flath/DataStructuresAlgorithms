{
  "hash": "ee66ed28b2cccc96b64bec0861c175bc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Valid Anagram\"\nauthor: \"Isaac Flath\"\ndate: \"2024-02-01\"\ncategories: [hash table, strings, sorting]\ndescription: \"Determine if 2 strings are anagrams of each other\"\n---\n\n>Problem Source:  Leetcode\n\n## Problem Description\n\nGiven two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n### tests\n\n::: {#f95829d1 .cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    s,t = \"anagram\",\"nagaram\"\n    expected = True\n    actual = fn(s,t)\n    assert actual == expected \n\n    s,t = \"rat\",\"car\"\n    expected = False\n    actual = fn(s,t)\n    assert actual == expected \n```\n:::\n\n\n## Solution\n\n### Hashmap\n\n+ Time Complexity: `O(n)`\n+ Space Complexity: `O(n)`\n\n::: {#fafb2300 .cell execution_count=2}\n``` {.python .cell-code}\ndef isAnagram(s: str, t: str) -> bool:\n    if len(s) != len(t): return False\n\n    countS,countT = {}, {}\n    for i in range(len(s)):\n        countS[s[i]] = 1 + countS.get(s[i],0)\n        countT[t[i]] = 1 + countT.get(t[i],0)\n    \n    for c in countS:\n        if countS[c] != countT.get(c,0): return False\n\n    return True\n\ntest(isAnagram)\n```\n:::\n\n\n::: {#374635f2 .cell execution_count=3}\n``` {.python .cell-code}\nfrom collections import Counter\ndef isAnagram(s: str, t: str) -> bool:\n    return Counter(s) == Counter(t)\n\ntest(isAnagram)\n```\n:::\n\n\n### Sorting\n\n+ Time Complexity: `O(nlogn)`\n+ Space Complexity: `O(1)`\n\n::: {#17dc31d5 .cell execution_count=4}\n``` {.python .cell-code}\ndef isAnagram(s: str, t: str) -> bool:\n    return sorted(list(s)) == sorted(list(t))\n\ntest(isAnagram)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}