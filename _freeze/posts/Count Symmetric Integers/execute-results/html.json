{
  "hash": "aea25d0f47ca7f34ccb20ac29c6e29ce",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Count Symmetric Integers\"\nauthor: \"Isaac Flath\"\ndate: \"2024-01-31\"\ncategories: [math, enumeration]\ndescription: \"Determine if an integer is a Symmetric\"\n---\n\n>Problem Source:  Leetcode\n\n## Problem Description\n\nYou are given two positive integers `low` and `high`.\n\nAn integer `x` consisting of `2 * n` digits is symmetric if the sum of the first `n` digits of `x` is equal to the sum of the last `n` digits of `x`. Numbers with an odd number of digits are never symmetric.\n\nReturn the number of symmetric integers in the range `[low, high]`.\n\n### tests\n\n::: {#fb7f3deb .cell execution_count=1}\n``` {.python .cell-code}\ndef test(fn):\n    low,high = 1,100\n    expected =  9\n    symmetric_count = fn(low,high) # 11, 22, 33, 44, 55, 66, 77, 88, and 99.\n    assert symmetric_count == expected \n\n    low, high = 1200, 1230\n    expected = 4\n    symmetric_count = fn(low,high) # 1203, 1212, 1221, and 1230\n    assert symmetric_count == expected \n\n    low, high = 0, 10000\n    expected = 624\n    symmetric_count = fn(low,high) \n    assert symmetric_count == expected \n```\n:::\n\n\n## Solution\n\n+ Time Complexity: `O(n^2)`\n+ Space Complexity: `O(1)`\n\n::: {#ea922f6f .cell execution_count=2}\n``` {.python .cell-code}\ndef sum(arr):\n    ttl = 0\n    for a in arr:\n        ttl += int(a)\n    return ttl\n\ndef split_int(x):\n    half = len(x)//2\n    left, right = x[:half], x[-half:]\n    return left, right\n\ndef isSymmetric(x, ):\n    x = str(x)\n    if len(x)%2 == 1: return False\n    half = len(x)//2\n    return sum(x[:half]) == sum(x[-half:])\n\ndef countSymmetricIntegers(low: int, high: int) -> int:\n    symmetric_count = 0\n    for num in range(low, high+1):\n        symmetric_count += isSymmetric(num)\n    return symmetric_count\n    \ntest(countSymmetricIntegers)\n```\n:::\n\n\n::: {#6ba3bd21 .cell execution_count=3}\n``` {.python .cell-code}\nimport timeit\ntimeit.timeit(lambda: countSymmetricIntegers(0,10000),number=1000)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n4.902573416009545\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Count Symmetric Integers_files"
    ],
    "filters": [],
    "includes": {}
  }
}